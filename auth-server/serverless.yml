# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: auth-server
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 60
  region: eu-central-1
  environment:
    CLIENT_ID: ${file(config.json):CLIENT_ID}
    CLIENT_SECRET: ${file(config.json):CLIENT_SECRET}
    PROJECT_ID: ${file(config.json):PROJECT_ID}
    CALENDAR_ID: ${file(config.json):CALENDAR_ID}

# you can overwrite defaults here
#  stage: dev
#  region: eu-central-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getAuthURL:
    handler: handler.getAuthURL
    events:
      - http:
          path: api/get-auth-url
          method: get
  getAccessToken:
    handler: handler.getAccessToken
    events:
      - http:
          path: api/token/{code}
          method: get
  getCalanderEvents:
    handler: handler.getCalanderEvents
    events:
      - http:
          path: api/get-events/{access_token}
          method: get
